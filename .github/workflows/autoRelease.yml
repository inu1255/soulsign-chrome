name: autoRelease

on:
  push:
    branches:
      - test

jobs:
  setup-and-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2.3.2
        with:
          ref: test

      - name: setup and build
        run: |
          npm install
          npm run build-update

      - name: Get menifest version
        uses: actions/github-script@v3.0.0
        id: get-menifest-version
        with:
          result-encoding: string
          script: |
            const manifest = require(`${process.env.GITHUB_WORKSPACE}/build/manifest.json`);
            return manifest.version;

      - name: Get latest release
        uses: actions/github-script@v3.0.0
        id: get-latest-release
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          result-encoding: string
          script: |
            try {
                var latestRelease = await github.repos.getLatestRelease({ owner: context.repo.owner, repo: context.repo.repo });
                return latestRelease.data.tag_name;
            } catch (error) {
                if (error.message === 'Not Found') {
                    return '0.0.0';
                } else {
                    core.setFailed(error.message)
                }
            }

      - name: Compare version
        uses: actions/github-script@v3.0.0
        id: comparison
        env:
          currentVersion: ${{ steps.get-menifest-version.outputs.result }}
          latestRelease: ${{ steps.get-latest-release.outputs.result }}
        with:
          script: |
            const compareVersions = require(`${process.env.GITHUB_WORKSPACE}/node_modules/compare-versions`);
            var currentVersion = `${process.env.currentVersion}`;
            var latestRelease = `${process.env.latestRelease}`;
            return compareVersions.compare(currentVersion, latestRelease, ">");

      - name: Get Changelog
        id: changelog-reader
        uses: mindsers/changelog-reader-action@v2.0.0
        with:
          version: ${{ steps.get-menifest-version.outputs.result }}
          path: ./CHANGELOG.md

      - name: Create Release
        if: steps.comparison.outputs.result == 'true'
        id: create_release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.changelog-reader.outputs.version }}
          release_name: Release v${{ steps.get-menifest-version.outputs.result }}
          body: ${{ steps.changelog-reader.outputs.changes }}
          draft: ${{ steps.changelog-reader.outputs.status == 'unreleased' }}
          prerelease: ${{ steps.changelog-reader.outputs.status == 'prereleased' }}

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build.zip
          asset_name: build_v${{ steps.get-menifest-version.outputs.result }}.zip
          asset_content_type: application/zip

      - name: Build gh-pages
        uses: peaceiris/actions-gh-pages@v3.6.4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          full_commit_message: Release v${{ steps.get-menifest-version.outputs.result }}

      - name: Git current repository name
        id: info
        uses: actions/github-script@v3.0.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          result-encoding: string
          script: |
            return context.repo.repo;

      - name: Cache src repos
        uses: actions/cache@v2.1.1
        id: cache
        with:
          path: ${{ github.workspace }}/hub-mirror-cache
          key: ${{ runner.os }}-${{ github.repository_owner }}-${{ steps.info.outputs.result }}-cache

      - name: Print the cache status
        if: steps.cache.outputs.cache-hit == 'true'
        run: |
          echo "Cached successfully."

      - name: Mirror the Github repos to Gitee with cache
        uses: Yikun/hub-mirror-action@v0.09
        with:
          src: github/yi-Xu-0100
          dst: gitee/yiXu0100
          dst_key: ${{ secrets.GITEE_PRIVATE_KEY }}
          dst_token: ${{ secrets.GITEE_TOKEN }}
          account_type: user
          cache_path: /github/workspace/hub-mirror-cache
          static_list: ${{ steps.info.outputs.result }}
          force_update: true

      - name: Print cache path
        run: |
          ls -la ${{ github.workspace }}/hub-mirror-cache